syntax = "proto3";

package google.cloud.apigee.flame.v1alpha1;

import "flame_models.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option java_package = "com.google.cloud.apigee.flame.v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "FlameServiceProto";
option go_package = "github.com/apigee/registry/rpc;rpc";

// The Flame API provides structures and relationships for
// Full Lifecycle API Management. It enables API platform
// teams to build rich models of their API ecosystems and
// provide information and oversight to API producers and
// consumers in their organizations.
service Flame {

  // ListApis returns matching apis.
  rpc ListApis(ListApisRequest) returns (ListApisResponse) {
    option (google.api.http) = {
      get : "/v1alpha1/{parent=projects/*}/apis"
    };
  }

  // GetApi returns a specified api.
  rpc GetApi(GetApiRequest) returns (Api) {
    option (google.api.http) = {
      get : "/v1alpha1/{name=projects/*/apis/*}"
    };
  }

  // CreateApi creates a specified api.
  rpc CreateApi(CreateApiRequest) returns (Api) {
    option (google.api.http) = {
      post : "/v1alpha1/{parent=projects/*}/apis"
      body : "api"
    };
  }

  // UpdateApi can be used to modify a specified api.
  rpc UpdateApi(UpdateApiRequest) returns (Api) {
    option (google.api.http) = {
      patch : "/v1alpha1/{api.name=projects/*/apis/*}"
      body : "api"
    };
  }

  // DeleteApi removes a specified api and all of the resources that it
  // owns.
  rpc DeleteApi(DeleteApiRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1alpha1/{name=projects/*/apis/*}"
    };
  }

  // ListVersions returns matching versions.
  rpc ListVersions(ListVersionsRequest) returns (ListVersionsResponse) {
    option (google.api.http) = {
      get : "/v1alpha1/{parent=projects/*/apis/*}/versions"
    };
  }

  // GetVersion returns a specified version.
  rpc GetVersion(GetVersionRequest) returns (Version) {
    option (google.api.http) = {
      get : "/v1alpha1/{name=projects/*/apis/*/versions/*}"
    };
  }

  // CreateVersion creates a specified version.
  rpc CreateVersion(CreateVersionRequest) returns (Version) {
    option (google.api.http) = {
      post : "/v1alpha1/{parent=projects/*/apis/*}/versions"
      body : "version"
    };
  }

  // UpdateVersion can be used to modify a specified version.
  rpc UpdateVersion(UpdateVersionRequest) returns (Version) {
    option (google.api.http) = {
      patch : "/v1alpha1/{version.name=projects/*/apis/*/versions/*}"
      body : "version"
    };
  }

  // DeleteVersion removes a specified version and all of the resources that it
  // owns.
  rpc DeleteVersion(DeleteVersionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1alpha1/{name=projects/*/apis/*/versions/*}"
    };
  }

  // ListSpecs returns matching specs.
  rpc ListSpecs(ListSpecsRequest) returns (ListSpecsResponse) {
    option (google.api.http) = {
      get : "/v1alpha1/{parent=projects/*/apis/*/versions/*}/specs"
    };
  }

  // GetSpec returns a specified spec.
  rpc GetSpec(GetSpecRequest) returns (Spec) {
    option (google.api.http) = {
      get : "/v1alpha1/{name=projects/*/apis/*/versions/*/specs/*}"
    };
  }

  // CreateSpec creates a specified spec.
  rpc CreateSpec(CreateSpecRequest) returns (Spec) {
    option (google.api.http) = {
      post : "/v1alpha1/{parent=projects/*/apis/*/versions/*}/specs"
      body : "spec"
    };
  }

  // UpdateSpec can be used to modify a specified spec.
  rpc UpdateSpec(UpdateSpecRequest) returns (Spec) {
    option (google.api.http) = {
      patch : "/v1alpha1/{spec.name=projects/*/apis/*/versions/*/specs/*}"
      body : "spec"
    };
  }

  // DeleteSpec removes a specified spec and all of the resources that it owns.
  rpc DeleteSpec(DeleteSpecRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1alpha1/{name=projects/*/apis/*/versions/*/specs/*}"
    };
  }

  // ListProperties returns matching properties.
  rpc ListProperties(ListPropertiesRequest) returns (ListPropertiesResponse) {
    option (google.api.http) = {
      get : "/v1alpha1/{parent=projects/*}/properties"
    };
  }

  // GetProperty returns a specified property.
  rpc GetProperty(GetPropertyRequest) returns (Property) {
    option (google.api.http) = {
      get : "/v1alpha1/{name=projects/*/properties/*}"
    };
  }

  // CreateProperty creates a specified property.
  rpc CreateProperty(CreatePropertyRequest) returns (Property) {
    option (google.api.http) = {
      post : "/v1alpha1/{parent=projects/*}/properties"
      body : "property"
    };
  }

  // UpdateProperty can be used to modify a specified property.
  rpc UpdateProperty(UpdatePropertyRequest) returns (Property) {
    option (google.api.http) = {
      patch : "/v1alpha1/{property.name=projects/*/properties/*}"
      body : "property"
    };
  }

  // DeleteProperty removes a specified property and all of the resources that
  // it owns.
  rpc DeleteProperty(DeletePropertyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1alpha1/{name=projects/*/properties/*}"
    };
  }
}

// Request message for ListApis.
message ListApisRequest {
  // The parent, which owns this collection of apis.
  // Format: projects/*
  string parent = 1;

  // The maximum number of apis to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 values will be returned.
  // The maximum is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `ListApis` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListApis` must match
  // the call that provided the page token.
  string page_token = 3;

  // An optional expression that can be used to filter the list.
  string filter = 4;
}

// Response message for ListApis.
message ListApisResponse {
  // The apis from the specified publisher.
  repeated Api apis = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request message for GetApi.
message GetApiRequest {
  // The name of the api to retrieve.
  // Format: projects/*/apis/*
  string name = 1;
}

// Request message for CreateApi.
message CreateApiRequest {
  // The parent, which owns this collection of apis.
  // Format: projects/*
  string parent = 1;
  // The api to create.
  Api api = 2;
  // The ID to use for the api, which will become the final component of
  // the api's resource name.
  //
  // This value should be 4-63 characters, and valid characters
  // are /[a-z][0-9]-/.
  string api_id = 3;
}

// Request message for UpdateApi.
message UpdateApiRequest {
  // The api to update.
  //
  // The `name` field is used to identify the api to update.
  // Format: projects/*/apis/*
  Api api = 1;

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request message for DeleteApi.
message DeleteApiRequest {
  // The name of the api to delete.
  // Format: projects/*/apis/*
  string name = 1;
}

// Request message for ListVersions.
message ListVersionsRequest {
  // The parent, which owns this collection of versions.
  // Format: projects/*/apis/*
  string parent = 1;
  // The maximum number of versions to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 values will be returned.
  // The maximum is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `ListVersions` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListVersions` must match
  // the call that provided the page token.
  string page_token = 3;

  // An optional expression that can be used to filter the list.
  string filter = 4;
}

// Response message for ListVersions.
message ListVersionsResponse {
  // The versions from the specified publisher.
  repeated Version versions = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request message for GetVersion.
message GetVersionRequest {
  // The name of the version to retrieve.
  // Format: projects/*/apis/*/versions/*
  string name = 1;
}

// Request message for CreateVersion.
message CreateVersionRequest {
  // The parent, which owns this collection of versions.
  // Format: projects/*/apis/*
  string parent = 1;
  // The version to create.
  Version version = 2;
  // The ID to use for the version, which will become the final component of
  // the version's resource name.
  //
  // This value should be 4-63 characters, and valid characters
  // are /[a-z][0-9]-/.
  string version_id = 3;
}

// Request message for UpdateVersion.
message UpdateVersionRequest {
  // The version to update.
  //
  // The `name` field is used to identify the version to update.
  // Format: projects/*/apis/*/versions/*
  Version version = 1;

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request message for DeleteVersion.
message DeleteVersionRequest {
  // The name of the version to delete.
  // Format: projects/*/apis/*/versions/*
  string name = 1;
}

// Request message for ListSpecs.
message ListSpecsRequest {
  // The parent, which owns this collection of specs.
  // Format: projects/*/apis/*/versions/*
  string parent = 1;

  // The maximum number of specs to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 values will be returned.
  // The maximum is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `ListSpecs` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListSpecs` must match
  // the call that provided the page token.
  string page_token = 3;

  // An optional expression that can be used to filter the list.
  string filter = 4;

  // The level of detail to return (defaults to BASIC).
  SpecView view = 5;
}

// Response message for ListSpecs.
message ListSpecsResponse {
  // The specs from the specified publisher.
  repeated Spec specs = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request message for GetSpec.
message GetSpecRequest {
  // The name of the spec to retrieve.
  // Format: projects/*/apis/*/versions/*/specs/*
  string name = 1;

  // The level of detail to return (defaults to BASIC).
  SpecView view = 2;
}

// Request message for CreateSpec.
message CreateSpecRequest {
  // The parent, which owns this collection of specs.
  // Format: projects/*/apis/*/versions/*
  string parent = 1;

  // The spec to create.
  Spec spec = 2;

  // The ID to use for the spec, which will become the final component of
  // the spec's resource name.
  //
  // This value should be 4-63 characters, and valid characters
  // are /[a-z][0-9]-/.
  string spec_id = 3;
}

// Request message for UpdateSpec.
message UpdateSpecRequest {
  // The spec to update.
  //
  // The `name` field is used to identify the spec to update.
  // Format: projects/*/apis/*/versions/*/specs/*
  Spec spec = 1;

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request message for DeleteSpec.
message DeleteSpecRequest {
  // The name of the spec to delete.
  // Format: projects/*/apis/*/versions/*/specs/*
  string name = 1;
}

// Request message for ListProperties.
message ListPropertiesRequest {
  // The parent, which owns this collection of properties.
  // Format: projects/*
  string parent = 1;

  // The maximum number of properties to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 values will be returned.
  // The maximum is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `ListProperties` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListProperties` must
  // match the call that provided the page token.
  string page_token = 3;

  // An optional expression that can be used to filter the list.
  string filter = 4;
}

// Response message for ListProperties.
message ListPropertiesResponse {
  // The properties from the specified publisher.
  repeated Property properties = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request message for GetProperty.
message GetPropertyRequest {
  // The name of the property to retrieve.
  // Format: projects/*/properties/*
  string name = 1;
}

// Request message for CreateProperty.
message CreatePropertyRequest {
  // The parent, which owns this collection of properties.
  // Format: projects/*
  string parent = 1;

  // The property to create.
  Property property = 2;
  // The ID to use for the property, which will become the final component of
  // the property's resource name.
  //
  // This value should be 4-63 characters, and valid characters
  // are /[a-z][0-9]-/.
  string property_id = 3;
}

// Request message for UpdateProperty.
message UpdatePropertyRequest {
  // The property to update.
  //
  // The `name` field is used to identify the property to update.
  // Format: projects/*/properties/*
  Property property = 1;

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request message for DeleteProperty.
message DeletePropertyRequest {
  // The name of the property to delete.
  // Format: projects/*/properties/*
  string name = 1;
}
